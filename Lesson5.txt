------------------------------Tuple------------------------------

tuple不可變 list可變

空tuple
>>> tuple_test = ()
>>> type(tuple_test)
<class 'tuple'>

單一值tuple(記得最後面一定要加逗號,不然會變成字串)
>>> tuple_test = 'Steven',
>>> type(tuple_test)
<class 'tuple'>

>>> tuple_test = ('Steven',)
>>> type(tuple_test)
<class 'tuple'>

>>> tuple_test = ('Steven')
>>> type(tuple_test)
<class 'str'>

多個值tuple(最後面可加可不加逗號)
>>> tuple_test = 'Steven', 'John', 'Wayne'
>>> type(tuple_test)
<class 'tuple'>

>>> tuple_test = 'Steven', 'John', 'Wayne',
>>> type(tuple_test)
<class 'tuple'>

unpacking(拆包)
>>> tuple_test = 'Steven', 'John', 'Wayne'
>>> a,b,c = tuple_test

>>> a
'Steven'
>>> b
'John'
>>> c
'Wayne'

在JS裡面其實就是解構的使用
let tuple_test = ["Steven", "John", "Wayne"]
let [b, c , d] = tuple_test

b
"Steven"
c
"John"
d
"Wayne"


交換變數
>>> a = 10
>>> b = 2
>>> a,b = b,a

>>> a
2
>>> b
10

比較JS:
let a= 10
let b= 2
[a,b]=  [b,a]

a
2
b
10

可以用+來結合tuple但是會回傳一個新的值給之前的變數
>>> t1 = ('Fee', 'Fie')
>>> t2 = ('Flop',)

>>> t1+=t2
>>> t1
('Fee', 'Fie', 'Flop')
>>> id(t1)
1575143944512

tuple可用for in迭帶
>>> for name in tuple_test:
...     print(name)
...
Steven
John
Wayne

tuple()list()可以將tuple、string、set、dict轉成tuple
>>> a = {1,2,3}
>>> type(a)
<class 'set'>

>>> type(tuple(a))
<class 'tuple'>


------------------------------List------------------------------

list()可以將tuple、string、set、dict轉成list
>>> list('cat')
['c', 'a', 't']

跟JS一樣用str用split()
來回傳一個list
不過JS可以用marxe.split('')直接拆開成字元

比較:
>>> marxe = 'abc'
>>> marxe.split('')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: empty separator
>>> marxe.split(' ')
['abc']

let a = '123'
a.split('')
["1", "2", "3"]

比較特別的地方是:index可以用負號(從結尾往回數第幾個)
>>> marxe = ['a', 'b', 'c']
>>> marxe[-1]
'c'

跟JS一樣有reverse()
>>> marxe = ['a', 'b', 'c']
>>> marxe.reverse()
>>> marxe
['c', 'b', 'a']

append(值) 將新的值放到尾端

inset(index, 值)
>>> marxe = ['a', 'b', 'c']
>>> marxe.insert(100, 'd')
>>> marxe
['a', 'b', 'c', 'd']
超過index範圍會自動補在最後一位

slice右邊只要是可跌代物件都可以
>>> marxe
['a', 'b', 'c', 'd']
>>> marxe[2:4] = (99,100)
>>> marxe
['a', 'b', 99, 100]

刪除element方式

del marxe[0] 可以刪除項目

marxe.remove("a")

marxe.pop(0)會回傳'a'

index可以找element 找不到會拋出錯誤,找到會回傳第一個符合的index

count計算element在list中出現幾次

join跟split相反

list淺拷貝
list() copy() slice

list深拷貝
import copy
>>> marxe = ['1','2',[4,5]]
>>> import copy
>>> marxe2 = copy.deepcopy(marxe)
>>> marxe2
['1', '2', [4, 5]]
>>> marxe2[2] = 3
>>> marxe
['1', '2', [4, 5]]
>>> marxe2
['1', '2', 3]

zip()可以迭代多個值
會在最短的list完成時停止,比較長的list後面的elment就不做事
zip()會回傳一個可迭代的產物
>>> english = 'Monday', 'Tuesday'
>>> french = 'Lundi', 'Mardi'
>>> zip(english, french)
<zip object at 0x0000016C2C6E7AC0>
>>> list(zip(english, french))
[('Monday', 'Lundi'), ('Tuesday', 'Mardi')]
>>> dict(zip(english, french))
{'Monday': 'Lundi', 'Tuesday': 'Mardi'}

串列生成式(list comprehension)
利用for in來生成list
[運算式 for item in 可迭代物 if 條件式]

>>> number_list = [number for number in range(1,6) if number % 2 == 1]
>>> number_list
[1, 3, 5]

>>> number_list = [number - 1 for number in range(1,6) if number % 2 == 1]
>>> number_list
[0, 2, 4]

tuple vs list
tuple通常可以取代list 但方法很少
1. tuple佔用空間少
2. tuple不能改變
3. tuple可以當dict使用
4. 具名tuple

tuple跟string沒有類似串列生成式(list comprehension)  因為它們不可變


list set dict都有生成式
串列生成式的[]改成()會變成產生器生成式(generator comprehension)
>>> number_list = (number for number in range(1,6) if number % 2 == 1)
>>> number_list
<generator object <genexpr> at 0x0000016C2C6E84A0>
