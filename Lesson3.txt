''或者""皆可以是文字(跟JS用法一樣)
'''或者"""可以表達多行字串(像JS的tagged templates `I am a man`)

>>> ''' I'm a
... man'''
" I'm a\nman"

>>> """ I'm a
... man"""
" I'm a\nman"


>>> print("give", 'me', '''money''', """thanks""")
give me money thanks

print可以用逗號隔開印出的log print會自動加上空格最後一個加上換行符號(跟JS的console.log一樣)

r代表原始字串會取消轉義(\n)用法
>>> info = r'Type a \n to get a new line'
>>> info
'Type a \\n to get a new line'
>>> print(info)
Type a \n to get a new line


r不會取消真正的換行
>>> info = r'''Boys
...     love
...     Girls'''
>>> info
'Boys\n\tlove\n\tGirls'
>>> print(info)
Boys
        love
        Girls


可以用*重複字串內容
>>> "hey " * 3
'hey hey hey '
>>>
比較JS:
"hey ".repeat(3)
"hey hey hey "


字串index可以帶負數(代表從後面第幾個數回來) JS不行
>>> name = "steven"
>>> name[-1]
'n'

不管是正數或者負數index 
超過就會報錯
>>> name[-7]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range

字串不能直接更改會報錯(JS不能更改 但是不會報錯)
>>> name[0] = 'u'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment

Slice
可以用slice取得子字串(不包括結束index 也就是只取到結束前一位index)
[開始:結束:間隔]

>>> name = "steven"
>>> name[:]
'steven'
倒轉方式
>>> name[-1::-1]
'nevets'
或
>>> name[::-1]
'nevets'

>>> name[1:3]
'te'

跟JS字串的slice用法一樣 只不過JS沒有間隔參數

補充:JS還有 
1.substring(開始,結束)
跟slice幾乎相同,但允許開始大於結束
不支持負數,會被視為0
2.substr(開始,長度)
允許開始是負數

substr不是JS核心規範中描述,歷史因素而存在僅瀏覽器的特性,非瀏覽器可能無法支援它
JS建議用slice即可

Split
>>> b = "get gloves,get mask"
>>> b.split(',')
['get gloves', 'get mask']
>>> b.split()
['get', 'gloves,get', 'mask']

會依split內的參數回傳切割後的list
split()不加參數,則會回傳以空白當單位切割字串list

比較JS:
JS的split()不加參數,則會把字串直接塞入一個array[0]
let b  = "get gloves,get mask"
b.split(',')
(2) ["get gloves", "get mask"]
b.split()
["get gloves,get mask"]


Join
把list用某個字串串起來
>>> c =  ["get gloves", "get mask"]
>>> ', '.join(c)
'get gloves, get mask'

比較JS:
JS的join是array的func,不是字串的func
let c =  ["get gloves", "get mask"]
c.join(',')
"get gloves,get mask"

Replace
>>> a = 'a duck goes into a bar'
預設會把符合的字串全部換成新的
>>> a.replace('a ', 'a famous ')
'a famous duck goes into a famous bar'
也可以只要指定符合的字串更換幾個
>>> a.replace('a ', 'a famouse ', 1)
'a famouse duck goes into a bar'

比較JS:
JS沒有第三個參數指定要換幾個符合的字串
預設也只會換第一個符合的字串
a = 'a duck goes into a bar'
a.replace('a ', 'a famouse ')
"a famouse duck goes into a bar"

Strip
>>> word = "   earth   "

預設是砍掉左邊跟右邊空白
>>> word.strip()
'earth'
>>> word.strip(' ')
'earth'

找不到字元就不會去動它
>>> word.strip('!')
'   earth   '

可以用lstrip跟rstrip去砍左邊或者右邊的空白
>>> word.lstrip(' ')
'earth   '
>>> word.lstrip()
'earth   '

find跟index
find找不到字元會回傳-1 index是直接拋出例外
>>> name = 'steve nash'

>>> name.find('s')
0
>>> name.find('z')
-1

>>> name.index('s')
0
>>> name.index('z')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: substring not found

>>> name.rfind('s')
8
>>> name.rindex('s')
8

>>> name.rfind('z')
-1
>>> name.rindex('z')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: substring not found


比較JS:
字串只有indexOf或lastIndexOf回傳字元所在的index(-1則為不存在)
a = "123123"

a.indexOf('1')
0
a.indexOf('4')
-1

a.lastIndexOf('1')
3
a.lastIndexOf("4")
-1

字串也可以用includes回傳true或false代表存不存在
a.includes("1")
true

至於find在JS中是array的方法後面要帶入function
[1,2,3].find((element)=>element >= 2)
2
[1,2,3].findIndex((element)=>element >= 2)
1

大小寫(考驗英文能力)
>>> name.capitalize()
'Steve nash'
>>> name.title()
'Steve Nash'
>>> name.upper()
'STEVE NASH'
>>> name.lower()
'steve nash'
>>> name.swapcase()
'STEVE NASH'

格式化
1.舊式(Python2跟Python3)
2.新式(Python2.6以上)
3.f-strings(Python3.6以上)

舊式:
%s 字串
%d 10進制整數
%x 16進制整數
%o 8進制整數
%f 10進制浮點數
%e 指數浮點數
%g 10進制或指數浮點數
%% 常數%

>>> cat = 'meimei'
>>> weight = 10
>>> "my cat %s weights %s pounds" % (cat,weight)
'my cat meimei weights 10 pounds'

舊式格式化規則:
1. 初始化'%'
2. 對齊字元 +代表靠右 -代表靠左
3. 選用最小寬度
4. .隔開最小寬度跟最大字元
5. 最大字元(%s的情況下) 如果是%f代表小數點後精確位數

>>> thing = "woodchuck"
>>> '%s' % thing
'woodchuck'
>>> '%20s' % thing
'           woodchuck'
>>> '%-20s' % thing
'woodchuck           '
>>> '%+20s' % thing
'           woodchuck'
>>> '%+20.3s' % thing
'                 woo'


新式
.format
帶tuple
>>> thing = 'woodchuck'
>>> place = 'lake'
>>> 'The {} is in this {}'.format(thing, place)

'The woodchuck is in this lake'
給參數預設值
>>> 'My name is {name}'.format(name = 'Steven')
'My name is Steven'

帶dict
>>> d = {'name': 'Steven'}
>>> 'My name is {0[name]}'.format(d)
'My name is Steven'

新式格式化規則:
1. 初始化':'
2. fill填補字元(預設為' ') 在字串比最小寬度的時候會去做填補動作
3. 對齊字元 '<'往左對齊(預設) '>'往右對齊 '^'代表中間 
4. 符號供數字使用 '-'負數 ''負數前面加上負號 ' '正數
5. 選用最小寬度
6. .隔開最小寬度跟最大字元
7. 最大字元

>>> thing = 'wraith'
>>> place = 'window'
>>> 'The {:>10s} is at the {:!^20}'.format(thing, place)
'The     wraith is at the !!!!!!!window!!!!!!!'


f-strings
直接在開頭的引號前加上f或F
在{}加入運算式或者變數名稱
(此方式比較像JS的tagged templates)

>>> thing = 'wereduck'
>>> place = 'werepond'
>>> f'The {thing} is in the {place}'
'The wereduck is in the werepond'

加入運算式
>>> f'The {thing.upper()} is in the {place.rjust(20)}'
'The WEREDUCK is in the             werepond'

f_strings格式化規則同新制規則

可以加入=來除錯(Python3.8以上的新功能)
>>> thing = 'wereduck'
>>> place = 'werepond'
>>> f'The {thing=} is in the {place=}'
"The thing='wereduck' is in the place='werepond'"